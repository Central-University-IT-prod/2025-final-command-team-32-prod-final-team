// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: couches.sql

package storage

import (
	"context"

	"github.com/google/uuid"
	"github.com/pgvector/pgvector-go"
)

const clearSitters = `-- name: ClearSitters :exec
DELETE FROM couch_sitters WHERE couch_id = $1
`

func (q *Queries) ClearSitters(ctx context.Context, db DBTX, couchID uuid.UUID) error {
	_, err := db.Exec(ctx, clearSitters, couchID)
	return err
}

const couchExists = `-- name: CouchExists :one
SELECT EXISTS(SELECT(1) FROM couches WHERE id = $1)
`

func (q *Queries) CouchExists(ctx context.Context, db DBTX, id uuid.UUID) (bool, error) {
	row := db.QueryRow(ctx, couchExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createCouch = `-- name: CreateCouch :one
INSERT INTO couches (
    name, author, embedding
) VALUES (
    $1, $2, $3
) RETURNING id
`

type CreateCouchParams struct {
	Name      string
	Author    string
	Embedding pgvector.Vector
}

func (q *Queries) CreateCouch(ctx context.Context, db DBTX, arg CreateCouchParams) (uuid.UUID, error) {
	row := db.QueryRow(ctx, createCouch, arg.Name, arg.Author, arg.Embedding)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

type CreateSitterParams struct {
	CouchID  uuid.UUID
	UserName string
}

const getCouch = `-- name: GetCouch :one
SELECT 
    couches.id, couches.name,
    couches.author, couches.embedding
FROM couches
WHERE id = $1
`

func (q *Queries) GetCouch(ctx context.Context, db DBTX, id uuid.UUID) (Couch, error) {
	row := db.QueryRow(ctx, getCouch, id)
	var i Couch
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Author,
		&i.Embedding,
	)
	return i, err
}

const getCouchFeed = `-- name: GetCouchFeed :many
SELECT id, private, title, original_title, release_year, age_rating, duration_minutes, poster_url, description, genres, actors, rating, embedding FROM cinemas
WHERE private = False AND
NOT EXISTS(SELECT(1) FROM viewed WHERE viewed.cinema_id = cinemas.id AND viewed.subject_id = $3)
ORDER BY cinemas.embedding <=> $1 LIMIT $2
`

type GetCouchFeedParams struct {
	Embedding pgvector.Vector
	Limit     int32
	SubjectID uuid.UUID
}

func (q *Queries) GetCouchFeed(ctx context.Context, db DBTX, arg GetCouchFeedParams) ([]Cinema, error) {
	rows, err := db.Query(ctx, getCouchFeed, arg.Embedding, arg.Limit, arg.SubjectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cinema
	for rows.Next() {
		var i Cinema
		if err := rows.Scan(
			&i.ID,
			&i.Private,
			&i.Title,
			&i.OriginalTitle,
			&i.ReleaseYear,
			&i.AgeRating,
			&i.DurationMinutes,
			&i.PosterUrl,
			&i.Description,
			&i.Genres,
			&i.Actors,
			&i.Rating,
			&i.Embedding,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCouchVector = `-- name: GetCouchVector :one
SELECT embedding FROM couches WHERE id = $1
`

func (q *Queries) GetCouchVector(ctx context.Context, db DBTX, id uuid.UUID) (pgvector.Vector, error) {
	row := db.QueryRow(ctx, getCouchVector, id)
	var embedding pgvector.Vector
	err := row.Scan(&embedding)
	return embedding, err
}

const getCouches = `-- name: GetCouches :many
SELECT DISTINCT 
    couch_sitters.couch_id,
    couches.name,
    couches.author
FROM couches INNER JOIN couch_sitters ON 
    couch_sitters.couch_id = couches.id
WHERE couch_sitters.user_name = $1
`

type GetCouchesRow struct {
	CouchID uuid.UUID
	Name    string
	Author  string
}

func (q *Queries) GetCouches(ctx context.Context, db DBTX, userName string) ([]GetCouchesRow, error) {
	rows, err := db.Query(ctx, getCouches, userName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCouchesRow
	for rows.Next() {
		var i GetCouchesRow
		if err := rows.Scan(&i.CouchID, &i.Name, &i.Author); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSitters = `-- name: GetSitters :many
SELECT couch_sitters.user_name FROM couch_sitters WHERE couch_id = $1
`

func (q *Queries) GetSitters(ctx context.Context, db DBTX, couchID uuid.UUID) ([]string, error) {
	rows, err := db.Query(ctx, getSitters, couchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var user_name string
		if err := rows.Scan(&user_name); err != nil {
			return nil, err
		}
		items = append(items, user_name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

type MarkCouchAsViewedBulkParams struct {
	SubjectID uuid.UUID
	CinemaID  uuid.UUID
}

const setCouchVector = `-- name: SetCouchVector :exec
UPDATE couches SET embedding = $1 WHERE id = $2
`

type SetCouchVectorParams struct {
	Embedding pgvector.Vector
	ID        uuid.UUID
}

func (q *Queries) SetCouchVector(ctx context.Context, db DBTX, arg SetCouchVectorParams) error {
	_, err := db.Exec(ctx, setCouchVector, arg.Embedding, arg.ID)
	return err
}

const updateCouch = `-- name: UpdateCouch :exec
UPDATE couches SET name = $1 WHERE id = $2
`

type UpdateCouchParams struct {
	Name string
	ID   uuid.UUID
}

func (q *Queries) UpdateCouch(ctx context.Context, db DBTX, arg UpdateCouchParams) error {
	_, err := db.Exec(ctx, updateCouch, arg.Name, arg.ID)
	return err
}
