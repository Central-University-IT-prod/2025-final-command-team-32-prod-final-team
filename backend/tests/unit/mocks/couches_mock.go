// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/contracts/couches.go

// Package mock_contracts is a generated GoMock package.
package mock_contracts

import (
	context "context"
	reflect "reflect"
	dto "solution/internal/domain/dto"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	pgvector "github.com/pgvector/pgvector-go"
)

// MockCouchRepository is a mock of CouchRepository interface.
type MockCouchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCouchRepositoryMockRecorder
}

// MockCouchRepositoryMockRecorder is the mock recorder for MockCouchRepository.
type MockCouchRepositoryMockRecorder struct {
	mock *MockCouchRepository
}

// NewMockCouchRepository creates a new mock instance.
func NewMockCouchRepository(ctrl *gomock.Controller) *MockCouchRepository {
	mock := &MockCouchRepository{ctrl: ctrl}
	mock.recorder = &MockCouchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCouchRepository) EXPECT() *MockCouchRepositoryMockRecorder {
	return m.recorder
}

// AdjustVector mocks base method.
func (m *MockCouchRepository) AdjustVector(ctx context.Context, id uuid.UUID, v *pgvector.Vector) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdjustVector", ctx, id, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdjustVector indicates an expected call of AdjustVector.
func (mr *MockCouchRepositoryMockRecorder) AdjustVector(ctx, id, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdjustVector", reflect.TypeOf((*MockCouchRepository)(nil).AdjustVector), ctx, id, v)
}

// Create mocks base method.
func (m *MockCouchRepository) Create(ctx context.Context, param dto.CreateCouch) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, param)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCouchRepositoryMockRecorder) Create(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCouchRepository)(nil).Create), ctx, param)
}

// DeleteFilmFromBlacklist mocks base method.
func (m *MockCouchRepository) DeleteFilmFromBlacklist(ctx context.Context, couchId, filmId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilmFromBlacklist", ctx, couchId, filmId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilmFromBlacklist indicates an expected call of DeleteFilmFromBlacklist.
func (mr *MockCouchRepositoryMockRecorder) DeleteFilmFromBlacklist(ctx, couchId, filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilmFromBlacklist", reflect.TypeOf((*MockCouchRepository)(nil).DeleteFilmFromBlacklist), ctx, couchId, filmId)
}

// DeleteFilmFromFavorites mocks base method.
func (m *MockCouchRepository) DeleteFilmFromFavorites(ctx context.Context, couchId, filmId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilmFromFavorites", ctx, couchId, filmId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilmFromFavorites indicates an expected call of DeleteFilmFromFavorites.
func (mr *MockCouchRepositoryMockRecorder) DeleteFilmFromFavorites(ctx, couchId, filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilmFromFavorites", reflect.TypeOf((*MockCouchRepository)(nil).DeleteFilmFromFavorites), ctx, couchId, filmId)
}

// Exists mocks base method.
func (m *MockCouchRepository) Exists(ctx context.Context, id uuid.UUID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockCouchRepositoryMockRecorder) Exists(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockCouchRepository)(nil).Exists), ctx, id)
}

// GetFavorites mocks base method.
func (m *MockCouchRepository) GetFavorites(ctx context.Context, couchId uuid.UUID, limit int64) ([]dto.CinemaView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavorites", ctx, couchId, limit)
	ret0, _ := ret[0].([]dto.CinemaView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavorites indicates an expected call of GetFavorites.
func (mr *MockCouchRepositoryMockRecorder) GetFavorites(ctx, couchId, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavorites", reflect.TypeOf((*MockCouchRepository)(nil).GetFavorites), ctx, couchId, limit)
}

// GetMany mocks base method.
func (m *MockCouchRepository) GetMany(ctx context.Context, username string) ([]dto.CouchView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", ctx, username)
	ret0, _ := ret[0].([]dto.CouchView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockCouchRepositoryMockRecorder) GetMany(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockCouchRepository)(nil).GetMany), ctx, username)
}

// GetOne mocks base method.
func (m *MockCouchRepository) GetOne(ctx context.Context, id uuid.UUID) (*dto.CouchView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", ctx, id)
	ret0, _ := ret[0].(*dto.CouchView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockCouchRepositoryMockRecorder) GetOne(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockCouchRepository)(nil).GetOne), ctx, id)
}

// GetRecommended mocks base method.
func (m *MockCouchRepository) GetRecommended(ctx context.Context, couchId uuid.UUID, v pgvector.Vector, limit int) ([]*dto.CinemaView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommended", ctx, couchId, v, limit)
	ret0, _ := ret[0].([]*dto.CinemaView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommended indicates an expected call of GetRecommended.
func (mr *MockCouchRepositoryMockRecorder) GetRecommended(ctx, couchId, v, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommended", reflect.TypeOf((*MockCouchRepository)(nil).GetRecommended), ctx, couchId, v, limit)
}

// MarkFilmsAsSeen mocks base method.
func (m *MockCouchRepository) MarkFilmsAsSeen(ctx context.Context, couchId uuid.UUID, films []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkFilmsAsSeen", ctx, couchId, films)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkFilmsAsSeen indicates an expected call of MarkFilmsAsSeen.
func (mr *MockCouchRepositoryMockRecorder) MarkFilmsAsSeen(ctx, couchId, films interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkFilmsAsSeen", reflect.TypeOf((*MockCouchRepository)(nil).MarkFilmsAsSeen), ctx, couchId, films)
}

// SaveFilmToBlacklist mocks base method.
func (m *MockCouchRepository) SaveFilmToBlacklist(ctx context.Context, couchId, filmId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFilmToBlacklist", ctx, couchId, filmId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFilmToBlacklist indicates an expected call of SaveFilmToBlacklist.
func (mr *MockCouchRepositoryMockRecorder) SaveFilmToBlacklist(ctx, couchId, filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFilmToBlacklist", reflect.TypeOf((*MockCouchRepository)(nil).SaveFilmToBlacklist), ctx, couchId, filmId)
}

// SaveFilmToFavorites mocks base method.
func (m *MockCouchRepository) SaveFilmToFavorites(ctx context.Context, couchId, filmId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFilmToFavorites", ctx, couchId, filmId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFilmToFavorites indicates an expected call of SaveFilmToFavorites.
func (mr *MockCouchRepositoryMockRecorder) SaveFilmToFavorites(ctx, couchId, filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFilmToFavorites", reflect.TypeOf((*MockCouchRepository)(nil).SaveFilmToFavorites), ctx, couchId, filmId)
}

// Update mocks base method.
func (m *MockCouchRepository) Update(ctx context.Context, id uuid.UUID, param dto.UpdateCouch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCouchRepositoryMockRecorder) Update(ctx, id, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCouchRepository)(nil).Update), ctx, id, param)
}

// MockCouchService is a mock of CouchService interface.
type MockCouchService struct {
	ctrl     *gomock.Controller
	recorder *MockCouchServiceMockRecorder
}

// MockCouchServiceMockRecorder is the mock recorder for MockCouchService.
type MockCouchServiceMockRecorder struct {
	mock *MockCouchService
}

// NewMockCouchService creates a new mock instance.
func NewMockCouchService(ctrl *gomock.Controller) *MockCouchService {
	mock := &MockCouchService{ctrl: ctrl}
	mock.recorder = &MockCouchServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCouchService) EXPECT() *MockCouchServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCouchService) Create(ctx context.Context, param dto.CreateCouch) (uuid.UUID, *dto.HttpErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, param)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(*dto.HttpErr)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCouchServiceMockRecorder) Create(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCouchService)(nil).Create), ctx, param)
}

// DeleteFilmFromBlacklist mocks base method.
func (m *MockCouchService) DeleteFilmFromBlacklist(ctx context.Context, couchId, filmId uuid.UUID) *dto.HttpErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilmFromBlacklist", ctx, couchId, filmId)
	ret0, _ := ret[0].(*dto.HttpErr)
	return ret0
}

// DeleteFilmFromBlacklist indicates an expected call of DeleteFilmFromBlacklist.
func (mr *MockCouchServiceMockRecorder) DeleteFilmFromBlacklist(ctx, couchId, filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilmFromBlacklist", reflect.TypeOf((*MockCouchService)(nil).DeleteFilmFromBlacklist), ctx, couchId, filmId)
}

// DeleteFilmFromFavorites mocks base method.
func (m *MockCouchService) DeleteFilmFromFavorites(ctx context.Context, couchId, filmId uuid.UUID) *dto.HttpErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilmFromFavorites", ctx, couchId, filmId)
	ret0, _ := ret[0].(*dto.HttpErr)
	return ret0
}

// DeleteFilmFromFavorites indicates an expected call of DeleteFilmFromFavorites.
func (mr *MockCouchServiceMockRecorder) DeleteFilmFromFavorites(ctx, couchId, filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilmFromFavorites", reflect.TypeOf((*MockCouchService)(nil).DeleteFilmFromFavorites), ctx, couchId, filmId)
}

// GetFavorites mocks base method.
func (m *MockCouchService) GetFavorites(ctx context.Context, couchId uuid.UUID, limit int64) ([]dto.CinemaView, *dto.HttpErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavorites", ctx, couchId, limit)
	ret0, _ := ret[0].([]dto.CinemaView)
	ret1, _ := ret[1].(*dto.HttpErr)
	return ret0, ret1
}

// GetFavorites indicates an expected call of GetFavorites.
func (mr *MockCouchServiceMockRecorder) GetFavorites(ctx, couchId, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavorites", reflect.TypeOf((*MockCouchService)(nil).GetFavorites), ctx, couchId, limit)
}

// GetMany mocks base method.
func (m *MockCouchService) GetMany(ctx context.Context, username string) ([]dto.CouchView, *dto.HttpErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", ctx, username)
	ret0, _ := ret[0].([]dto.CouchView)
	ret1, _ := ret[1].(*dto.HttpErr)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockCouchServiceMockRecorder) GetMany(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockCouchService)(nil).GetMany), ctx, username)
}

// GetOne mocks base method.
func (m *MockCouchService) GetOne(ctx context.Context, id uuid.UUID) (*dto.CouchView, *dto.HttpErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", ctx, id)
	ret0, _ := ret[0].(*dto.CouchView)
	ret1, _ := ret[1].(*dto.HttpErr)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockCouchServiceMockRecorder) GetOne(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockCouchService)(nil).GetOne), ctx, id)
}

// GetRecommended mocks base method.
func (m *MockCouchService) GetRecommended(ctx context.Context, couchId uuid.UUID, limit int) ([]*dto.CinemaView, *dto.HttpErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommended", ctx, couchId, limit)
	ret0, _ := ret[0].([]*dto.CinemaView)
	ret1, _ := ret[1].(*dto.HttpErr)
	return ret0, ret1
}

// GetRecommended indicates an expected call of GetRecommended.
func (mr *MockCouchServiceMockRecorder) GetRecommended(ctx, couchId, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommended", reflect.TypeOf((*MockCouchService)(nil).GetRecommended), ctx, couchId, limit)
}

// MarkFilmsAsSeen mocks base method.
func (m *MockCouchService) MarkFilmsAsSeen(ctx context.Context, couchId uuid.UUID, films []uuid.UUID) *dto.HttpErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkFilmsAsSeen", ctx, couchId, films)
	ret0, _ := ret[0].(*dto.HttpErr)
	return ret0
}

// MarkFilmsAsSeen indicates an expected call of MarkFilmsAsSeen.
func (mr *MockCouchServiceMockRecorder) MarkFilmsAsSeen(ctx, couchId, films interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkFilmsAsSeen", reflect.TypeOf((*MockCouchService)(nil).MarkFilmsAsSeen), ctx, couchId, films)
}

// SaveFilmToBlacklist mocks base method.
func (m *MockCouchService) SaveFilmToBlacklist(ctx context.Context, couchId, filmId uuid.UUID) *dto.HttpErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFilmToBlacklist", ctx, couchId, filmId)
	ret0, _ := ret[0].(*dto.HttpErr)
	return ret0
}

// SaveFilmToBlacklist indicates an expected call of SaveFilmToBlacklist.
func (mr *MockCouchServiceMockRecorder) SaveFilmToBlacklist(ctx, couchId, filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFilmToBlacklist", reflect.TypeOf((*MockCouchService)(nil).SaveFilmToBlacklist), ctx, couchId, filmId)
}

// SaveFilmToFavorites mocks base method.
func (m *MockCouchService) SaveFilmToFavorites(ctx context.Context, couchId, filmId uuid.UUID) *dto.HttpErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFilmToFavorites", ctx, couchId, filmId)
	ret0, _ := ret[0].(*dto.HttpErr)
	return ret0
}

// SaveFilmToFavorites indicates an expected call of SaveFilmToFavorites.
func (mr *MockCouchServiceMockRecorder) SaveFilmToFavorites(ctx, couchId, filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFilmToFavorites", reflect.TypeOf((*MockCouchService)(nil).SaveFilmToFavorites), ctx, couchId, filmId)
}

// Update mocks base method.
func (m *MockCouchService) Update(ctx context.Context, id uuid.UUID, param dto.UpdateCouch) *dto.HttpErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, param)
	ret0, _ := ret[0].(*dto.HttpErr)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCouchServiceMockRecorder) Update(ctx, id, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCouchService)(nil).Update), ctx, id, param)
}
