// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/contracts/auth.go

// Package mock_contracts is a generated GoMock package.
package mock_contracts

import (
	context "context"
	reflect "reflect"
	dto "solution/internal/domain/dto"

	jwt "github.com/golang-jwt/jwt/v5"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// ExchangeCodeForToken mocks base method.
func (m *MockAuthService) ExchangeCodeForToken(ctx context.Context, code string) (*dto.YandexTokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeCodeForToken", ctx, code)
	ret0, _ := ret[0].(*dto.YandexTokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeCodeForToken indicates an expected call of ExchangeCodeForToken.
func (mr *MockAuthServiceMockRecorder) ExchangeCodeForToken(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeCodeForToken", reflect.TypeOf((*MockAuthService)(nil).ExchangeCodeForToken), ctx, code)
}

// ExchangeTokenForUserInfo mocks base method.
func (m *MockAuthService) ExchangeTokenForUserInfo(ctx context.Context, token string) (*dto.YandexUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeTokenForUserInfo", ctx, token)
	ret0, _ := ret[0].(*dto.YandexUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeTokenForUserInfo indicates an expected call of ExchangeTokenForUserInfo.
func (mr *MockAuthServiceMockRecorder) ExchangeTokenForUserInfo(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeTokenForUserInfo", reflect.TypeOf((*MockAuthService)(nil).ExchangeTokenForUserInfo), ctx, token)
}

// GenerateToken mocks base method.
func (m *MockAuthService) GenerateToken(ctx context.Context, subject string) (string, *dto.HttpErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", ctx, subject)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*dto.HttpErr)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthServiceMockRecorder) GenerateToken(ctx, subject interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthService)(nil).GenerateToken), ctx, subject)
}

// GetSubject mocks base method.
func (m *MockAuthService) GetSubject(ctx context.Context, tokenString *jwt.Token) (string, *dto.HttpErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubject", ctx, tokenString)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*dto.HttpErr)
	return ret0, ret1
}

// GetSubject indicates an expected call of GetSubject.
func (mr *MockAuthServiceMockRecorder) GetSubject(ctx, tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubject", reflect.TypeOf((*MockAuthService)(nil).GetSubject), ctx, tokenString)
}
