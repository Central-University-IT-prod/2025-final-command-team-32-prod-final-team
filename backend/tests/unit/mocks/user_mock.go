// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/contracts/user.go

// Package mock_contracts is a generated GoMock package.
package mock_contracts

import (
	context "context"
	reflect "reflect"
	dto "solution/internal/domain/dto"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	pgvector "github.com/pgvector/pgvector-go"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AdjustVector mocks base method.
func (m *MockUserRepository) AdjustVector(ctx context.Context, id uuid.UUID, v *pgvector.Vector) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdjustVector", ctx, id, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdjustVector indicates an expected call of AdjustVector.
func (mr *MockUserRepositoryMockRecorder) AdjustVector(ctx, id, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdjustVector", reflect.TypeOf((*MockUserRepository)(nil).AdjustVector), ctx, id, v)
}

// Create mocks base method.
func (m *MockUserRepository) Create(ctx context.Context, u *dto.UserAuth) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, u)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), ctx, u)
}

// DeleteFilmFromBlacklist mocks base method.
func (m *MockUserRepository) DeleteFilmFromBlacklist(ctx context.Context, login string, filmId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilmFromBlacklist", ctx, login, filmId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilmFromBlacklist indicates an expected call of DeleteFilmFromBlacklist.
func (mr *MockUserRepositoryMockRecorder) DeleteFilmFromBlacklist(ctx, login, filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilmFromBlacklist", reflect.TypeOf((*MockUserRepository)(nil).DeleteFilmFromBlacklist), ctx, login, filmId)
}

// DeleteFilmFromFavorites mocks base method.
func (m *MockUserRepository) DeleteFilmFromFavorites(ctx context.Context, login string, filmId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilmFromFavorites", ctx, login, filmId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilmFromFavorites indicates an expected call of DeleteFilmFromFavorites.
func (mr *MockUserRepositoryMockRecorder) DeleteFilmFromFavorites(ctx, login, filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilmFromFavorites", reflect.TypeOf((*MockUserRepository)(nil).DeleteFilmFromFavorites), ctx, login, filmId)
}

// Exists mocks base method.
func (m *MockUserRepository) Exists(ctx context.Context, login string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, login)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockUserRepositoryMockRecorder) Exists(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockUserRepository)(nil).Exists), ctx, login)
}

// FilmExists mocks base method.
func (m *MockUserRepository) FilmExists(ctx context.Context, filmId uuid.UUID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilmExists", ctx, filmId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// FilmExists indicates an expected call of FilmExists.
func (mr *MockUserRepositoryMockRecorder) FilmExists(ctx, filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilmExists", reflect.TypeOf((*MockUserRepository)(nil).FilmExists), ctx, filmId)
}

// GetById mocks base method.
func (m *MockUserRepository) GetById(ctx context.Context, id uuid.UUID) (*dto.UserView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*dto.UserView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUserRepositoryMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserRepository)(nil).GetById), ctx, id)
}

// GetByLogin mocks base method.
func (m *MockUserRepository) GetByLogin(ctx context.Context, login string) (*dto.UserView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", ctx, login)
	ret0, _ := ret[0].(*dto.UserView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin.
func (mr *MockUserRepositoryMockRecorder) GetByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockUserRepository)(nil).GetByLogin), ctx, login)
}

// GetFavorites mocks base method.
func (m *MockUserRepository) GetFavorites(ctx context.Context, login string, limit int64) ([]dto.CinemaView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavorites", ctx, login, limit)
	ret0, _ := ret[0].([]dto.CinemaView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavorites indicates an expected call of GetFavorites.
func (mr *MockUserRepositoryMockRecorder) GetFavorites(ctx, login, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavorites", reflect.TypeOf((*MockUserRepository)(nil).GetFavorites), ctx, login, limit)
}

// GetFilmById mocks base method.
func (m *MockUserRepository) GetFilmById(ctx context.Context, filmId uuid.UUID) (*dto.CinemaView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmById", ctx, filmId)
	ret0, _ := ret[0].(*dto.CinemaView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmById indicates an expected call of GetFilmById.
func (mr *MockUserRepositoryMockRecorder) GetFilmById(ctx, filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmById", reflect.TypeOf((*MockUserRepository)(nil).GetFilmById), ctx, filmId)
}

// GetVectorByLogin mocks base method.
func (m *MockUserRepository) GetVectorByLogin(ctx context.Context, login string) (*pgvector.Vector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVectorByLogin", ctx, login)
	ret0, _ := ret[0].(*pgvector.Vector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVectorByLogin indicates an expected call of GetVectorByLogin.
func (mr *MockUserRepositoryMockRecorder) GetVectorByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVectorByLogin", reflect.TypeOf((*MockUserRepository)(nil).GetVectorByLogin), ctx, login)
}

// MarkFilmsAsSeen mocks base method.
func (m *MockUserRepository) MarkFilmsAsSeen(ctx context.Context, userId uuid.UUID, ids []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkFilmsAsSeen", ctx, userId, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkFilmsAsSeen indicates an expected call of MarkFilmsAsSeen.
func (mr *MockUserRepositoryMockRecorder) MarkFilmsAsSeen(ctx, userId, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkFilmsAsSeen", reflect.TypeOf((*MockUserRepository)(nil).MarkFilmsAsSeen), ctx, userId, ids)
}

// SaveFilmToBlacklist mocks base method.
func (m *MockUserRepository) SaveFilmToBlacklist(ctx context.Context, login string, filmId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFilmToBlacklist", ctx, login, filmId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFilmToBlacklist indicates an expected call of SaveFilmToBlacklist.
func (mr *MockUserRepositoryMockRecorder) SaveFilmToBlacklist(ctx, login, filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFilmToBlacklist", reflect.TypeOf((*MockUserRepository)(nil).SaveFilmToBlacklist), ctx, login, filmId)
}

// SaveFilmToFavorites mocks base method.
func (m *MockUserRepository) SaveFilmToFavorites(ctx context.Context, login string, filmId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFilmToFavorites", ctx, login, filmId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFilmToFavorites indicates an expected call of SaveFilmToFavorites.
func (mr *MockUserRepositoryMockRecorder) SaveFilmToFavorites(ctx, login, filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFilmToFavorites", reflect.TypeOf((*MockUserRepository)(nil).SaveFilmToFavorites), ctx, login, filmId)
}

// SaveRate mocks base method.
func (m *MockUserRepository) SaveRate(ctx context.Context, login string, filmId uuid.UUID, rate int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRate", ctx, login, filmId, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRate indicates an expected call of SaveRate.
func (mr *MockUserRepositoryMockRecorder) SaveRate(ctx, login, filmId, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRate", reflect.TypeOf((*MockUserRepository)(nil).SaveRate), ctx, login, filmId, rate)
}

// SearchUser mocks base method.
func (m *MockUserRepository) SearchUser(ctx context.Context, userLike string) ([]*dto.UserView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUser", ctx, userLike)
	ret0, _ := ret[0].([]*dto.UserView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUser indicates an expected call of SearchUser.
func (mr *MockUserRepositoryMockRecorder) SearchUser(ctx, userLike interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUser", reflect.TypeOf((*MockUserRepository)(nil).SearchUser), ctx, userLike)
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// DeleteFilmFromBlacklist mocks base method.
func (m *MockUserService) DeleteFilmFromBlacklist(ctx context.Context, login string, filmId uuid.UUID) *dto.HttpErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilmFromBlacklist", ctx, login, filmId)
	ret0, _ := ret[0].(*dto.HttpErr)
	return ret0
}

// DeleteFilmFromBlacklist indicates an expected call of DeleteFilmFromBlacklist.
func (mr *MockUserServiceMockRecorder) DeleteFilmFromBlacklist(ctx, login, filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilmFromBlacklist", reflect.TypeOf((*MockUserService)(nil).DeleteFilmFromBlacklist), ctx, login, filmId)
}

// DeleteFilmFromFavorites mocks base method.
func (m *MockUserService) DeleteFilmFromFavorites(ctx context.Context, login string, filmId uuid.UUID) *dto.HttpErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilmFromFavorites", ctx, login, filmId)
	ret0, _ := ret[0].(*dto.HttpErr)
	return ret0
}

// DeleteFilmFromFavorites indicates an expected call of DeleteFilmFromFavorites.
func (mr *MockUserServiceMockRecorder) DeleteFilmFromFavorites(ctx, login, filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilmFromFavorites", reflect.TypeOf((*MockUserService)(nil).DeleteFilmFromFavorites), ctx, login, filmId)
}

// GetFavorites mocks base method.
func (m *MockUserService) GetFavorites(ctx context.Context, login string, limit int64) ([]dto.CinemaView, *dto.HttpErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavorites", ctx, login, limit)
	ret0, _ := ret[0].([]dto.CinemaView)
	ret1, _ := ret[1].(*dto.HttpErr)
	return ret0, ret1
}

// GetFavorites indicates an expected call of GetFavorites.
func (mr *MockUserServiceMockRecorder) GetFavorites(ctx, login, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavorites", reflect.TypeOf((*MockUserService)(nil).GetFavorites), ctx, login, limit)
}

// GetProfile mocks base method.
func (m *MockUserService) GetProfile(ctx context.Context, login string) (*dto.UserView, *dto.HttpErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", ctx, login)
	ret0, _ := ret[0].(*dto.UserView)
	ret1, _ := ret[1].(*dto.HttpErr)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockUserServiceMockRecorder) GetProfile(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockUserService)(nil).GetProfile), ctx, login)
}

// GetVector mocks base method.
func (m *MockUserService) GetVector(ctx context.Context, login string) (*pgvector.Vector, *dto.HttpErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVector", ctx, login)
	ret0, _ := ret[0].(*pgvector.Vector)
	ret1, _ := ret[1].(*dto.HttpErr)
	return ret0, ret1
}

// GetVector indicates an expected call of GetVector.
func (mr *MockUserServiceMockRecorder) GetVector(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVector", reflect.TypeOf((*MockUserService)(nil).GetVector), ctx, login)
}

// Login mocks base method.
func (m *MockUserService) Login(ctx context.Context, uLogin *dto.UserAuth) (*dto.UserAuthResponse, *dto.HttpErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, uLogin)
	ret0, _ := ret[0].(*dto.UserAuthResponse)
	ret1, _ := ret[1].(*dto.HttpErr)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceMockRecorder) Login(ctx, uLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserService)(nil).Login), ctx, uLogin)
}

// MarkFilmsAsSeen mocks base method.
func (m *MockUserService) MarkFilmsAsSeen(ctx context.Context, userId uuid.UUID, ids []uuid.UUID) *dto.HttpErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkFilmsAsSeen", ctx, userId, ids)
	ret0, _ := ret[0].(*dto.HttpErr)
	return ret0
}

// MarkFilmsAsSeen indicates an expected call of MarkFilmsAsSeen.
func (mr *MockUserServiceMockRecorder) MarkFilmsAsSeen(ctx, userId, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkFilmsAsSeen", reflect.TypeOf((*MockUserService)(nil).MarkFilmsAsSeen), ctx, userId, ids)
}

// Register mocks base method.
func (m *MockUserService) Register(ctx context.Context, u *dto.UserAuth) (*dto.UserAuthResponse, *dto.HttpErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, u)
	ret0, _ := ret[0].(*dto.UserAuthResponse)
	ret1, _ := ret[1].(*dto.HttpErr)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserServiceMockRecorder) Register(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserService)(nil).Register), ctx, u)
}

// SaveFilmToBlacklist mocks base method.
func (m *MockUserService) SaveFilmToBlacklist(ctx context.Context, login string, filmId uuid.UUID) *dto.HttpErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFilmToBlacklist", ctx, login, filmId)
	ret0, _ := ret[0].(*dto.HttpErr)
	return ret0
}

// SaveFilmToBlacklist indicates an expected call of SaveFilmToBlacklist.
func (mr *MockUserServiceMockRecorder) SaveFilmToBlacklist(ctx, login, filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFilmToBlacklist", reflect.TypeOf((*MockUserService)(nil).SaveFilmToBlacklist), ctx, login, filmId)
}

// SaveFilmToFavorites mocks base method.
func (m *MockUserService) SaveFilmToFavorites(ctx context.Context, login string, filmId uuid.UUID) *dto.HttpErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFilmToFavorites", ctx, login, filmId)
	ret0, _ := ret[0].(*dto.HttpErr)
	return ret0
}

// SaveFilmToFavorites indicates an expected call of SaveFilmToFavorites.
func (mr *MockUserServiceMockRecorder) SaveFilmToFavorites(ctx, login, filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFilmToFavorites", reflect.TypeOf((*MockUserService)(nil).SaveFilmToFavorites), ctx, login, filmId)
}

// SaveRate mocks base method.
func (m *MockUserService) SaveRate(ctx context.Context, login string, filmId uuid.UUID, rate int32) *dto.HttpErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRate", ctx, login, filmId, rate)
	ret0, _ := ret[0].(*dto.HttpErr)
	return ret0
}

// SaveRate indicates an expected call of SaveRate.
func (mr *MockUserServiceMockRecorder) SaveRate(ctx, login, filmId, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRate", reflect.TypeOf((*MockUserService)(nil).SaveRate), ctx, login, filmId, rate)
}

// SearchUser mocks base method.
func (m *MockUserService) SearchUser(ctx context.Context, userLike string) ([]*dto.UserView, *dto.HttpErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUser", ctx, userLike)
	ret0, _ := ret[0].([]*dto.UserView)
	ret1, _ := ret[1].(*dto.HttpErr)
	return ret0, ret1
}

// SearchUser indicates an expected call of SearchUser.
func (mr *MockUserServiceMockRecorder) SearchUser(ctx, userLike interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUser", reflect.TypeOf((*MockUserService)(nil).SearchUser), ctx, userLike)
}

// SetVector mocks base method.
func (m *MockUserService) SetVector(ctx context.Context, login string, genres []string) *dto.HttpErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVector", ctx, login, genres)
	ret0, _ := ret[0].(*dto.HttpErr)
	return ret0
}

// SetVector indicates an expected call of SetVector.
func (mr *MockUserServiceMockRecorder) SetVector(ctx, login, genres interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVector", reflect.TypeOf((*MockUserService)(nil).SetVector), ctx, login, genres)
}
