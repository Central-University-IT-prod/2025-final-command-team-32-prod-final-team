// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/contracts/cinema.go

// Package mock_contracts is a generated GoMock package.
package mock_contracts

import (
	context "context"
	reflect "reflect"
	storage "solution/internal/database/storage"
	dto "solution/internal/domain/dto"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	pgvector "github.com/pgvector/pgvector-go"
)

// MockCinemaReposiroty is a mock of CinemaReposiroty interface.
type MockCinemaReposiroty struct {
	ctrl     *gomock.Controller
	recorder *MockCinemaReposirotyMockRecorder
}

// MockCinemaReposirotyMockRecorder is the mock recorder for MockCinemaReposiroty.
type MockCinemaReposirotyMockRecorder struct {
	mock *MockCinemaReposiroty
}

// NewMockCinemaReposiroty creates a new mock instance.
func NewMockCinemaReposiroty(ctrl *gomock.Controller) *MockCinemaReposiroty {
	mock := &MockCinemaReposiroty{ctrl: ctrl}
	mock.recorder = &MockCinemaReposirotyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCinemaReposiroty) EXPECT() *MockCinemaReposirotyMockRecorder {
	return m.recorder
}

// CheckUserIsPrivileged mocks base method.
func (m *MockCinemaReposiroty) CheckUserIsPrivileged(ctx context.Context, username string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserIsPrivileged", ctx, username)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckUserIsPrivileged indicates an expected call of CheckUserIsPrivileged.
func (mr *MockCinemaReposirotyMockRecorder) CheckUserIsPrivileged(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserIsPrivileged", reflect.TypeOf((*MockCinemaReposiroty)(nil).CheckUserIsPrivileged), ctx, username)
}

// Create mocks base method.
func (m *MockCinemaReposiroty) Create(ctx context.Context, c *dto.CinemaCreate, vector pgvector.Vector, login string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, c, vector, login)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCinemaReposirotyMockRecorder) Create(ctx, c, vector, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCinemaReposiroty)(nil).Create), ctx, c, vector, login)
}

// DeleteFilm mocks base method.
func (m *MockCinemaReposiroty) DeleteFilm(ctx context.Context, filmId uuid.UUID, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilm", ctx, filmId, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilm indicates an expected call of DeleteFilm.
func (mr *MockCinemaReposirotyMockRecorder) DeleteFilm(ctx, filmId, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilm", reflect.TypeOf((*MockCinemaReposiroty)(nil).DeleteFilm), ctx, filmId, username)
}

// GetById mocks base method.
func (m *MockCinemaReposiroty) GetById(ctx context.Context, id uuid.UUID) (*dto.CinemaView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*dto.CinemaView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockCinemaReposirotyMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockCinemaReposiroty)(nil).GetById), ctx, id)
}

// GetCinemaPic mocks base method.
func (m *MockCinemaReposiroty) GetCinemaPic(ctx context.Context, cinemaId uuid.UUID) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCinemaPic", ctx, cinemaId)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCinemaPic indicates an expected call of GetCinemaPic.
func (mr *MockCinemaReposirotyMockRecorder) GetCinemaPic(ctx, cinemaId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCinemaPic", reflect.TypeOf((*MockCinemaReposiroty)(nil).GetCinemaPic), ctx, cinemaId)
}

// GetRecommended mocks base method.
func (m *MockCinemaReposiroty) GetRecommended(ctx context.Context, v pgvector.Vector, userId uuid.UUID, limit int) ([]*dto.CinemaView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommended", ctx, v, userId, limit)
	ret0, _ := ret[0].([]*dto.CinemaView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommended indicates an expected call of GetRecommended.
func (mr *MockCinemaReposirotyMockRecorder) GetRecommended(ctx, v, userId, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommended", reflect.TypeOf((*MockCinemaReposiroty)(nil).GetRecommended), ctx, v, userId, limit)
}

// GetTopRated mocks base method.
func (m *MockCinemaReposiroty) GetTopRated(ctx context.Context, offset, limit int) ([]*dto.CinemaView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopRated", ctx, offset, limit)
	ret0, _ := ret[0].([]*dto.CinemaView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopRated indicates an expected call of GetTopRated.
func (mr *MockCinemaReposirotyMockRecorder) GetTopRated(ctx, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopRated", reflect.TypeOf((*MockCinemaReposiroty)(nil).GetTopRated), ctx, offset, limit)
}

// GetUserModel mocks base method.
func (m *MockCinemaReposiroty) GetUserModel(ctx context.Context, login string) (*storage.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserModel", ctx, login)
	ret0, _ := ret[0].(*storage.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserModel indicates an expected call of GetUserModel.
func (mr *MockCinemaReposirotyMockRecorder) GetUserModel(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserModel", reflect.TypeOf((*MockCinemaReposiroty)(nil).GetUserModel), ctx, login)
}

// SearchFilm mocks base method.
func (m *MockCinemaReposiroty) SearchFilm(ctx context.Context, titleLike string, tags []string) ([]*dto.CinemaView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFilm", ctx, titleLike, tags)
	ret0, _ := ret[0].([]*dto.CinemaView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFilm indicates an expected call of SearchFilm.
func (mr *MockCinemaReposirotyMockRecorder) SearchFilm(ctx, titleLike, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFilm", reflect.TypeOf((*MockCinemaReposiroty)(nil).SearchFilm), ctx, titleLike, tags)
}

// SetCinemaPic mocks base method.
func (m *MockCinemaReposiroty) SetCinemaPic(ctx context.Context, cinemaId uuid.UUID, picName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCinemaPic", ctx, cinemaId, picName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCinemaPic indicates an expected call of SetCinemaPic.
func (mr *MockCinemaReposirotyMockRecorder) SetCinemaPic(ctx, cinemaId, picName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCinemaPic", reflect.TypeOf((*MockCinemaReposiroty)(nil).SetCinemaPic), ctx, cinemaId, picName)
}

// UpdateFilm mocks base method.
func (m *MockCinemaReposiroty) UpdateFilm(ctx context.Context, params dto.CinemaUpdate, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilm", ctx, params, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilm indicates an expected call of UpdateFilm.
func (mr *MockCinemaReposirotyMockRecorder) UpdateFilm(ctx, params, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilm", reflect.TypeOf((*MockCinemaReposiroty)(nil).UpdateFilm), ctx, params, username)
}

// MockCinemaService is a mock of CinemaService interface.
type MockCinemaService struct {
	ctrl     *gomock.Controller
	recorder *MockCinemaServiceMockRecorder
}

// MockCinemaServiceMockRecorder is the mock recorder for MockCinemaService.
type MockCinemaServiceMockRecorder struct {
	mock *MockCinemaService
}

// NewMockCinemaService creates a new mock instance.
func NewMockCinemaService(ctrl *gomock.Controller) *MockCinemaService {
	mock := &MockCinemaService{ctrl: ctrl}
	mock.recorder = &MockCinemaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCinemaService) EXPECT() *MockCinemaServiceMockRecorder {
	return m.recorder
}

// CheckUserIsPrivileged mocks base method.
func (m *MockCinemaService) CheckUserIsPrivileged(ctx context.Context, username string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserIsPrivileged", ctx, username)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckUserIsPrivileged indicates an expected call of CheckUserIsPrivileged.
func (mr *MockCinemaServiceMockRecorder) CheckUserIsPrivileged(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserIsPrivileged", reflect.TypeOf((*MockCinemaService)(nil).CheckUserIsPrivileged), ctx, username)
}

// Create mocks base method.
func (m *MockCinemaService) Create(ctx context.Context, c *dto.CinemaCreate, login string) (uuid.UUID, *dto.HttpErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, c, login)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(*dto.HttpErr)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCinemaServiceMockRecorder) Create(ctx, c, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCinemaService)(nil).Create), ctx, c, login)
}

// DeleteFilm mocks base method.
func (m *MockCinemaService) DeleteFilm(ctx context.Context, filmId uuid.UUID, username string) *dto.HttpErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilm", ctx, filmId, username)
	ret0, _ := ret[0].(*dto.HttpErr)
	return ret0
}

// DeleteFilm indicates an expected call of DeleteFilm.
func (mr *MockCinemaServiceMockRecorder) DeleteFilm(ctx, filmId, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilm", reflect.TypeOf((*MockCinemaService)(nil).DeleteFilm), ctx, filmId, username)
}

// GetById mocks base method.
func (m *MockCinemaService) GetById(ctx context.Context, id uuid.UUID) (*dto.CinemaView, *dto.HttpErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*dto.CinemaView)
	ret1, _ := ret[1].(*dto.HttpErr)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockCinemaServiceMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockCinemaService)(nil).GetById), ctx, id)
}

// GetGenres mocks base method.
func (m *MockCinemaService) GetGenres(ctx context.Context) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenres", ctx)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetGenres indicates an expected call of GetGenres.
func (mr *MockCinemaServiceMockRecorder) GetGenres(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenres", reflect.TypeOf((*MockCinemaService)(nil).GetGenres), ctx)
}

// GetRecommended mocks base method.
func (m *MockCinemaService) GetRecommended(ctx context.Context, login string, limit int) ([]*dto.CinemaView, *dto.HttpErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommended", ctx, login, limit)
	ret0, _ := ret[0].([]*dto.CinemaView)
	ret1, _ := ret[1].(*dto.HttpErr)
	return ret0, ret1
}

// GetRecommended indicates an expected call of GetRecommended.
func (mr *MockCinemaServiceMockRecorder) GetRecommended(ctx, login, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommended", reflect.TypeOf((*MockCinemaService)(nil).GetRecommended), ctx, login, limit)
}

// GetTopRated mocks base method.
func (m *MockCinemaService) GetTopRated(ctx context.Context, offset, limit int) ([]*dto.CinemaView, *dto.HttpErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopRated", ctx, offset, limit)
	ret0, _ := ret[0].([]*dto.CinemaView)
	ret1, _ := ret[1].(*dto.HttpErr)
	return ret0, ret1
}

// GetTopRated indicates an expected call of GetTopRated.
func (mr *MockCinemaServiceMockRecorder) GetTopRated(ctx, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopRated", reflect.TypeOf((*MockCinemaService)(nil).GetTopRated), ctx, offset, limit)
}

// SearchFilm mocks base method.
func (m *MockCinemaService) SearchFilm(ctx context.Context, titleLike string, tags []string) ([]*dto.CinemaView, *dto.HttpErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFilm", ctx, titleLike, tags)
	ret0, _ := ret[0].([]*dto.CinemaView)
	ret1, _ := ret[1].(*dto.HttpErr)
	return ret0, ret1
}

// SearchFilm indicates an expected call of SearchFilm.
func (mr *MockCinemaServiceMockRecorder) SearchFilm(ctx, titleLike, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFilm", reflect.TypeOf((*MockCinemaService)(nil).SearchFilm), ctx, titleLike, tags)
}

// UpdateFilm mocks base method.
func (m *MockCinemaService) UpdateFilm(ctx context.Context, params dto.CinemaUpdate, username string) *dto.HttpErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilm", ctx, params, username)
	ret0, _ := ret[0].(*dto.HttpErr)
	return ret0
}

// UpdateFilm indicates an expected call of UpdateFilm.
func (mr *MockCinemaServiceMockRecorder) UpdateFilm(ctx, params, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilm", reflect.TypeOf((*MockCinemaService)(nil).UpdateFilm), ctx, params, username)
}
