// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/contracts/file.go

// Package mock_contracts is a generated GoMock package.
package mock_contracts

import (
	context "context"
	reflect "reflect"
	dto "solution/internal/domain/dto"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockFileRepository is a mock of FileRepository interface.
type MockFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileRepositoryMockRecorder
}

// MockFileRepositoryMockRecorder is the mock recorder for MockFileRepository.
type MockFileRepositoryMockRecorder struct {
	mock *MockFileRepository
}

// NewMockFileRepository creates a new mock instance.
func NewMockFileRepository(ctrl *gomock.Controller) *MockFileRepository {
	mock := &MockFileRepository{ctrl: ctrl}
	mock.recorder = &MockFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRepository) EXPECT() *MockFileRepositoryMockRecorder {
	return m.recorder
}

// UploadFile mocks base method.
func (m *MockFileRepository) UploadFile(ctx context.Context, fileKey string, fileContent []byte, minioPubHost string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, fileKey, fileContent, minioPubHost)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockFileRepositoryMockRecorder) UploadFile(ctx, fileKey, fileContent, minioPubHost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockFileRepository)(nil).UploadFile), ctx, fileKey, fileContent, minioPubHost)
}

// MockFileService is a mock of FileService interface.
type MockFileService struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceMockRecorder
}

// MockFileServiceMockRecorder is the mock recorder for MockFileService.
type MockFileServiceMockRecorder struct {
	mock *MockFileService
}

// NewMockFileService creates a new mock instance.
func NewMockFileService(ctrl *gomock.Controller) *MockFileService {
	mock := &MockFileService{ctrl: ctrl}
	mock.recorder = &MockFileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileService) EXPECT() *MockFileServiceMockRecorder {
	return m.recorder
}

// GetFileLink mocks base method.
func (m *MockFileService) GetFileLink(ctx context.Context, cinemaId uuid.UUID) (string, *dto.HttpErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileLink", ctx, cinemaId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*dto.HttpErr)
	return ret0, ret1
}

// GetFileLink indicates an expected call of GetFileLink.
func (mr *MockFileServiceMockRecorder) GetFileLink(ctx, cinemaId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileLink", reflect.TypeOf((*MockFileService)(nil).GetFileLink), ctx, cinemaId)
}

// UploadFile mocks base method.
func (m *MockFileService) UploadFile(ctx context.Context, filmdId uuid.UUID, fileKey string, fileContent []byte) *dto.HttpErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, filmdId, fileKey, fileContent)
	ret0, _ := ret[0].(*dto.HttpErr)
	return ret0
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockFileServiceMockRecorder) UploadFile(ctx, filmdId, fileKey, fileContent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockFileService)(nil).UploadFile), ctx, filmdId, fileKey, fileContent)
}
